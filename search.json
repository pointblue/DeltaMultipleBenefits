[{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DeltaMultipleBenefits","text":"DeltaMultipleBenefits package facilitates estimating net impacts scenarios landscape change Sacramento-San Joaquin River Delta, created funding Proposition 1 Delta Water Quality Ecosystem Restoration Program administered California Department Fish Wildlife (Grant Agreement Number–Q1996022). package provides tools applying existing data species distribution models user-supplied landscapes estimate range benefits Delta community compare landscapes. Currently, benefit categories addressed include: Agricultural Livelihoods, Water Quality, Climate Change Resilience, Biodiversity Support. category represented multiple individual metrics can summarized entire landscape. comparing metrics estimated proposed scenarios landscape change metrics estimated baseline landscape representing current conditions, expected net change metric can estimated. Ultimately, R package intended facilitate comprehensive multidimensional understanding direction magnitude potential impacts landscape change (proposed anticipated), communication projected synergies trade-offs among multiple goals, identification solutions address trade-offs. vignette serves tutorial outlining major steps analyzing alternative Delta landscapes comparing , including: Preparing new landscape scenarios analysis Summarizing net change total area land cover class Estimating net change simple metrics Estimating net change metrics informed spatial models , use toy land cover data set example work steps, reproduce analyses conducted Dybala et al. (review)doi:Link TBD, original baseline land cover data, scenarios, distribution models, required supporting data can accessed online (see “Supporting Data” ) included package.","code":"library(DeltaMultipleBenefits) library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE library(terra) #> terra 1.8.42 library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:terra': #>  #>     intersect, union #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tidyr) #>  #> Attaching package: 'tidyr' #> The following object is masked from 'package:terra': #>  #>     extract library(magrittr) #>  #> Attaching package: 'magrittr' #> The following object is masked from 'package:tidyr': #>  #>     extract #> The following objects are masked from 'package:terra': #>  #>     extract, inset library(ggplot2) library(tibble)"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"step-1--preparing-a-new-landscape-scenario-for-analysis","dir":"Articles","previous_headings":"","what":"Step 1. Preparing a new landscape scenario for analysis","title":"DeltaMultipleBenefits","text":"prepare new landscape scenario analysis DeltaMultipleBenefits framework, land cover classifications must first aligned used framework, designed work existing metrics species distribution models. land cover classification scheme includes natural agricultural land cover classes, organized hierarchically major land cover classes subclasses. Certain subclasses relevant certain metrics species distribution models, metrics apply entire major land cover class. Therefore, generally recommend assigning land covers landscape scenario specific subclass existing scheme:","code":"data(key, package = 'DeltaMultipleBenefits') head(key) #> # A tibble: 6 × 7 #>   CODE_BASELINE CODE_NAME                  CLASS     SUBCLASS DETAIL LABEL COLOR #>           <dbl> <chr>                      <chr>     <chr>    <chr>  <chr> <chr> #> 1            10 PERENNIAL_CROPS            PERENNIA… NA       NA     Pere… #940… #> 2            11 ORCHARD_DECIDUOUS          NA        DECIDUO… NA     Orch… #940… #> 3            15 ORCHARD_CITRUS&SUBTROPICAL NA        CITRUS … NA     Orch… #C76… #> 4            19 VINEYARD                   NA        VINEYARD NA     Vine… #ECB… #> 5            20 ANNUAL_CROPS               ANNUAL C… NA       NA     Annu… #32C… #> 6            21 GRAIN&HAY                  NA        GRAIN &… NA     Grai… #FFA…"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"working-with-polygons","dir":"Articles","previous_headings":"Step 1. Preparing a new landscape scenario for analysis","what":"1.1 Working with polygons","title":"DeltaMultipleBenefits","text":"example align land cover classifications new landscape scenario represented polygons, ’ll work olinda1 dataset file contained sf package. data set includes place names instead land cover classifications, ’ll treat though represented land covers recode supported CODE_NAME values key. Finally, ’ll join key data match new CODE_NAME values CODE_BASELINE values ’ll need later .  Next, convert polygons raster format desired projection, extent, resolution. Simple features objects must first converted SpatVector objects using terra::vect(). ’ll create raster template small number columns rows (thus coarse resolution) just demonstration purposes, ensure alignment rasters analysis, usually works best use existing raster template. Next, transfer land cover code values template create new landscape raster ’ll treat “baseline” landscape. Finally, help plotting, ’ll assign factor levels color codings.","code":"olinda1 <- sf::st_read(system.file(\"shape/olinda1.shp\", package = \"sf\"),                         quiet = TRUE) head(olinda1) #> Simple feature collection with 6 features and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -34.86406 ymin: -7.999297 xmax: -34.85496 ymax: -7.988471 #> Geodetic CRS:  GRS 1980(IUGG, 1980) #>      ID      CD_GEOCODI   TIPO   CD_GEOCODB    NM_BAIR V014 #> 1 28801 260960005000001 URBANO 260960005020 Ouro Preto 1119 #> 2 28802 260960005000002 URBANO 260960005020 Ouro Preto 1267 #> 3 28803 260960005000003 URBANO 260960005020 Ouro Preto  557 #> 4 28804 260960005000004 URBANO 260960005020 Ouro Preto  709 #> 5 28805 260960005000005 URBANO 260960005020 Ouro Preto 1045 #> 6 28806 260960005000006 URBANO 260960005020 Ouro Preto  727 #>                         geometry #> 1 POLYGON ((-34.86406 -7.9924... #> 2 POLYGON ((-34.86129 -7.9899... #> 3 POLYGON ((-34.85856 -7.9924... #> 4 POLYGON ((-34.85752 -7.9948... #> 5 POLYGON ((-34.8582 -7.99754... #> 6 POLYGON ((-34.85957 -7.9960...  new_shp <- olinda1 %>%    # recode existing place name values with supported land cover names in key   dplyr::mutate(     CODE_NAME = dplyr::case_when(       NM_BAIR %in% c('Ouro Preto', 'Sítio Novo', 'Sapucaia', 'Salgadinho') ~         'ORCHARD_DECIDUOUS',       NM_BAIR %in% c('Tabajara', \"Caixa D'Água\", 'Águas Compridas',                       'São Benedito') ~          'ORCHARD_CITRUS&SUBTROPICAL',       NM_BAIR %in% c('Fragoso', 'Alto da Bondade', 'Alto da Conquista',                       'Passarinho') ~          'VINEYARD',       NM_BAIR %in% c('Bultrins', 'Jardim Atlântico', 'Rio Doce',                       'Alto do Sol Nascente') ~          'GRAIN&HAY_WHEAT',       NM_BAIR %in% c('Alto da Nação', 'Monte', 'Casa Caiada') ~          'FIELD_CORN',       NM_BAIR %in% c('Guadalupe', 'Bonsucesso', 'Bairro Novo') ~          'RIPARIAN_FOREST_POFR',       NM_BAIR %in% c('Varadouro', 'Amparo', 'Amaro Branco') ~          'RIPARIAN_FOREST_QULO',       NM_BAIR %in% c('Vila Popular', 'Peixinhos', 'Carmo') ~         'WETLAND_MANAGED_PERENNIAL',       NM_BAIR %in% c('Jardim Brasil', 'Aguazinha', 'Santa Teresa') ~          'WETLAND_MANAGED_SEASONAL',       is.na(NM_BAIR) ~ 'PASTURE_ALFALFA',       TRUE ~ 'UNKNOWN')) %>%    # transfer CODE_BASELINE values from key   dplyr::left_join(key, by = 'CODE_NAME')   ggplot2::ggplot(new_shp) +    ggplot2::geom_sf(ggplot2::aes(fill = CODE_NAME)) # simplify number of fields, change to SpatVector, and change projection new_vect = new_shp %>%    dplyr::select(CODE_NAME, CODE_BASELINE)  template = terra::rast(new_vect, ncols = 100, nrows = 100)  baseline = terra::rasterize(x = new_vect,                             y = template,                              field = 'CODE_BASELINE')  # assign factor levels: levels(baseline) <-  key %>%    dplyr::select(id = CODE_BASELINE, label = CODE_NAME) %>%    tidyr::drop_na() %>% as.data.frame()  # assign color coding terra::coltab(baseline) <- key %>%    dplyr::select(CODE_BASELINE, COLOR) %>% tidyr::drop_na() %>%   tidyr::complete(CODE_BASELINE = c(0:255)) %>%    dplyr::pull(COLOR) plot(baseline)"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"working-with-existing-rasters","dir":"Articles","previous_headings":"Step 1. Preparing a new landscape scenario for analysis","what":"1.2 Working with existing rasters","title":"DeltaMultipleBenefits","text":"landscape analyzed raster format already, existing land cover values encoded similarly translated supported values existing land cover classification scheme. example, ’ll use baseline raster created , create new version serve new scenario landscape change.","code":"# simple example scenario: all wheat pixels (22) are converted to Fremont  # cottonwood riparian forest (71) scenario <- terra::classify(baseline,                             rcl = data.frame(from = 22, to = 71) %>%                                as.matrix())  levels(scenario) <-  key %>%    dplyr::select(id = CODE_BASELINE, label = CODE_NAME) %>%    tidyr::drop_na() %>% as.data.frame()  terra::coltab(scenario) <- key %>%    dplyr::select(CODE_BASELINE, COLOR) %>% tidyr::drop_na() %>%   tidyr::complete(CODE_BASELINE = c(0:255)) %>%    dplyr::pull(COLOR)  # stack landscapes to compare landscapes = c(baseline, scenario) names(landscapes) = c('baseline', 'scenario') plot(landscapes) #Note the orange wheat cells have changed to red riparian cells"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"step-2--summarizing-the-net-change-in-the-total-area-of-each-land-cover-class","dir":"Articles","previous_headings":"","what":"Step 2. Summarizing the net change in the total area of each land cover class","title":"DeltaMultipleBenefits","text":"Built-functions make simple estimate change total area land cover class baseline one scenario landscape rasters. First, sum total area land cover class landscape raster, summarize change . sum_landcover: function takes SpatRaster one layers , layer, counts number pixels unique land cover class multiplies provided pixel_area value estimate total area land cover class. returns tibble scenario name (taken names raster layer), CODE_NAME land cover class, total area. ’ll first use terra::cellSize estimate area pixel ha. option rollup = TRUE adds extra rows output sum total area riparian managed wetland subclasses. function also supports options mask portions raster /summarize total area zone. sum_change: function calculates net change area land cover class baseline landscape one scenario landscapes. Note function expects output sum_landcover, includes field scenario representing names landscape. least one scenario must named “baseline”, scenarios assumed represent alternative scenario landscape comparison baseline. Thus net change multiple scenarios can estimated simultaneously. result tibble scenario name, CODE_NAME land cover class, fields representing total area land cover class scenario question corresponding area baseline, net_change , positive value indicates increase baseline.","code":"area = terra::cellSize(baseline, unit = 'ha')[50,50] %>% tibble::deframe()  landcover_totals = DeltaMultipleBenefits::sum_landcover(   landscapes = landscapes,    pixel_area = area,   rollup = TRUE) %>%   arrange(scenario, CODE_NAME) landcover_change = DeltaMultipleBenefits::sum_change(landcover_totals)"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"step-3--estimating-the-net-change-in-simple-metrics","dir":"Articles","previous_headings":"","what":"Step 3. Estimating the net change in simple metrics","title":"DeltaMultipleBenefits","text":"developed several “simple metrics” representing several categories benefits including: agricultural livelihoods, water quality, climate change resilience. example, agricultural livelihood metrics include number agricultural jobs, average annual wage, gross production value. “simple metrics” sense single mean value metric used represent land cover class, regardless Delta land cover located. Therefore, estimating net change metrics baseline scenario landscape relatively simple compared estimating net change metrics derived spatial model (see ), steps similar estimating net change land cover area . However, uncertainty value metric land cover class, resulting spatial temporal variation, can also accounted estimating uncertainty net change. values assigned land cover class metric available download via Zenodo (doi:[10.5281/zenodo.7504874](https://doi.org/10.5281/zenodo.7504874)), also included package: sum_metrics: First estimate total landscape score metric landscape raster, combining total area land cover class estimated per-unit-area metrics land cover class. metrics, involves multiplying per-unit-area metrics total area land cover class summing entire landscape. Annual Wages (part Agricultural Livelihoods category benefits), instead calculates new weighted average wage across agricultural hectares (.e., supporting agricultural jobs associated wage value). metrics Climate Change Resilience category, instead calculates new overall average resilience score scale 1 (low resilience) 10 (high resilience). function returns tibble scenario name, fields metrics defining metric categories units, SCORE_TOTAL SCORE_TOTAL_SE, representing combined uncertainty. units field also updated reflect scores longer per-hectare, instead summed hectares landscape. total area land cover class calculated includes area individual riparian managed wetland subclasses well roll-total area, must take care double-count total landscape scores calcualted . Thus far, metrics available riparian managed wetland subclasses, instead apply riparian managed wetland land covers generally. Therefore, filter subclasses exclude calculation. Note: get warning message , example landscapes include land cover classes present metrics data. sum_change: , can use sum_change estimate difference metric baseline scenario landscapes. However, time uncertainty total landscape scores, uncertainty difference also estimated. use coverage factor k = 2 approximate 95% confidence interval net_change. Visualize resulting estimates net change:","code":"data(metrics, package = 'DeltaMultipleBenefits') head(metrics) scores = DeltaMultipleBenefits::sum_metrics(   metricdat = metrics %>%     dplyr::filter(       !(grepl('RIPARIAN_|WETLAND_MANAGED_|WETLAND_TIDAL|WATER', CODE_NAME))),   areadat = landcover_totals %>%     filter(!(grepl('RIPARIAN_|WETLAND_MANAGED_|WETLAND_TIDAL|WATER', CODE_NAME)))) scores_change = DeltaMultipleBenefits::sum_change(scores, k = 2) head(scores_change) scores_change %>%    # invert water quality scores so a reduction in pesticide use is shown as a   # net benefit   dplyr::mutate(     net_change = dplyr::if_else(       METRIC_CATEGORY == 'Water Quality',       -1 * net_change,       net_change)) %>%    ggplot2::ggplot(ggplot2::aes(net_change, METRIC)) +   ggplot2::facet_wrap(~METRIC_CATEGORY, ncol = 1, scales = 'free') +   ggplot2::geom_col() +    ggplot2::geom_errorbar(ggplot2::aes(xmin = lcl, xmax = ucl), width = 0.25) +   # add blank geoms to ensure zeroes line up across facets   ggplot2::geom_blank(ggplot2::aes(x = -ucl)) +    ggplot2::geom_blank(ggplot2::aes(x = -lcl)) +   ggplot2::theme_minimal()"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"step-4--estimating-the-net-change-in-metrics-informed-by-spatial-models","dir":"Articles","previous_headings":"","what":"Step 4. Estimating the net change in metrics informed by spatial models","title":"DeltaMultipleBenefits","text":"addition “simple metrics” described , developed spatial distribution models riparian landbirds waterbirds predict probability species presence pixel landscape, depending land cover class pixel, composition land cover classes surrounding area, features landscape. used probability presence predictions indicator suitable habitat, represent benefits category biodiversity support. Evaluating net change biodiversity support scenario baseline landscapes necessarily complicated evaluating “simple metrics” , also allows nuance spatial variation. Currently, spatial models supported distribution models riparian landbird species groups waterbird species. development described manuscript (Dybala et al. review - Link TBD) models available download via Zenodo (doi: 10.5281/zenodo.7531945). However, spatial models species, benefits categories incorporated future versions package developed.","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"prepare-landscape-predictors","dir":"Articles","previous_headings":"Step 4. Estimating the net change in metrics informed by spatial models > 4.1 Riparian landbird models","what":"4.1.1 Prepare landscape predictors","title":"DeltaMultipleBenefits","text":"Beginning models riparian landbird species, first use built-functions generate focal statistics pixel baseline scenario landscape rasters represent features landscape within certain distance survey location. steps : (1) prepare landscape raster generating focal stats, (2) use Python run focal stats, (3) finalize predictors use models. ease use large number rasters, functions intended write read directory defined functions arguments, rather work rasters memory. python_focal_prep: first step separates landscape raster separate layers distinct land cover class, default value 1 everywhere land cover class present, 0 otherwise. addition, function calls function reclassify_landcover aggregate rename land cover classes appropriate intended set distribution models, specified value SDM. Currently, options SDM include ‘riparian’, ‘waterbird_fall’, ‘waterbird_win’. result written directory located : pathout/SDM/landscape_name. directory already exist, created automatically. Note: function expect values provided landscape labels assigned, use defining names new layers. Use purrr::map function run function landscape: python_focal_run: second step generate focal statistics separate land cover rasters generated previous step. Focal statistics perform given operation cells within given distance focal cell, repeated every cell raster. process slow, can run entirely R, much faster use Python. Therefore, function currently requires Python installed system specifically arcpy Spatial Analyst extension. R package reticulate used internally run simple python script generating focal statistics. ensure arcpy module can found, may need specify version Python use. example (change filepath needed reflect system): example, apply function SUM rasters generated previous step value 1 every cell land cover class present, result represent total number cells land cover class within distance defined scale argument. riparian landbird models require focal stats summarizing landscapes within two different radii: 50m 2000m. can use purrr:map2 iterate 4 combinations landscape radius. results writen pathout/SDM/landscape_name/scale. Note overwrite option function. files already exist pathout/SDM/landscape_name, return error. Previous versions deleted manually pathout changed. python_focal_finalize: third step finalize results focal stats previous step generate predictors use riparian distribution models. SDM = 'riparian', result converting results previous step, provide total number cells land cover class, proportion total number cells appending scale value predictor name _50 _2000, expected original model. , can use purrr:map2 iterate 4 combinations landscape radius. results written directory pathout/landscape_name.","code":"purrr::map(names(landscapes),            ~DeltaMultipleBenefits::python_focal_prep(              landscape = landscapes[[.x]],              SDM = 'riparian',              pathout = 'GIS/SDM_predictors/cover',              landscape_name = .x,              overwrite = TRUE)) reticulate::use_python('C:/Python27/ArcGISx6410.8/python.exe', required = TRUE) purrr::map2(.x = c(rep(names(landscapes), each = 2)),             .y = c(rep(c('50', '2000'), 2)),            ~DeltaMultipleBenefits::python_focal_run(              pathin = 'SDM_predictors/cover',              landscape_name = .x,              SDM = 'riparian',              scale = .y,              fun = 'SUM',              pathout = 'SDM_predictors/focal_stats')) purrr::map2(.x = c(rep(names(landscapes), each = 2)),             .y = c(rep(c('50', '2000'), 2)),            ~DeltaMultipleBenefits::python_focal_finalize(              pathin = 'SDM_predictors/focal_stats',              landscape_name = .x,              SDM = 'riparian',              scale = .y,              pathout = 'SDM_predictors'            ))"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"generate-model-predictions","dir":"Articles","previous_headings":"Step 4. Estimating the net change in metrics informed by spatial models > 4.1 Riparian landbird models","what":"4.1.2 Generate model predictions","title":"DeltaMultipleBenefits","text":"fit_SDM: Use finalized predictors created previous step landscape fit distribution models 9 riparian landbird species. modlist refer R object containing list riparian distribution models. original models included area.ha, predictor accounting variation survey effort, held constant new predictions; selected 3.14159 referring total area hectares within 50m survey location, 4 surveys. addition, original models included region, predictor indicating whether survey conducted Sacramento Valley (region = 0) Delta San Joaquin (region = 1). Thus, predictions Delta constant value 1. constant values can passed dataframe, rather needing create raster layers , predictors. addition, original analysis considered open water unsuitable land cover class riparian landbirds priori, specified unsuitable = 90 (land cover class value open water); create mask provided landscape 0 values wherever land cover class equals values provided unsuitable NA elsewhere, used cover predicted values model. Thus, original call function analyses Delta looked like : However, code work correctly example landscapes two reasons: (1) unsuitable land cover class value 90 exist example scenario, result mask landscape NA values, throwing error, (2) example scenario include predictors required original distribution model, including land cover classes, climate variables, distance stream. predict riparian landbird distributions example landscapes, required predictors must provided, either additional raster files pathin directory constant values. demonstration purposes (approach appropriate real analyses), treat missing land cover classes truly absent landscape, value 0 every pixel assume climate distance stream vary across example landscape. also refrain specifying land covers unsuitable priori. Note: predictor provided constant take precedence predictor provided raster pathin directory. transform_SDM: Finally, riparian landbird species varied prevalence across landscape precision distribution models, different thresholds predicted probability presence useful separating locations likely present absent. Therefore, estimate total area suitable habitat species, riparian landbirds collectively, useful convert continuous probabilities species presence predicted previous step binary predictions presence absence. function passes detection data embedded original models dismo::threshold function identify values predicted probability presence meet criteria specified. , use statistic equal_sens_spec, value specificity (probability correctly predicting species absence) equal sensitivity (probability correctly predicting species presence), statistics can selected (see ?dismo::threshold).","code":"purrr::map(names(landscapes),            ~DeltaMultipleBenefits::fit_SDM(              pathin = 'SDM_predictors',              SDM = 'riparian',              landscape_name = .x,              modlist = BRT_riparian,              constants = data.frame(region = 1,                                     area.ha = 3.141593),              landscape = landscapes[[.x]],              unsuitable = 90, #open water              pathout = 'SDM_results')) purrr::map(names(landscapes),            ~DeltaMultipleBenefits::fit_SDM(              pathin = 'SDM_predictors',              SDM = 'riparian',              landscape_name = .x,              pathout = 'SDM_results',              modlist = BRT_riparian,              constants = data.frame(region = 1,                                     area.ha = 3.141593,                                     streamdist = 20,                                     bio_1 = 15.5,                                     bio_12 = 400,                                     SALIX_50 = 0,                                     MIXEDFOREST_50 = 0,                                     SALIXSHRUB_50 = 0,                                     MIXEDSHRUB_50 = 0,                                     INTROSCRUB_50 = 0,                                     WATER_50 = 0,                                     URBAN_50 = 0,                                     IDLE_50 = 0,                                     RICE_50 = 0,                                     SALIX_2000 = 0,                                     MIXEDFOREST_2000 = 0,                                     SALIXSHRUB_2000 = 0,                                     MIXEDSHRUB_2000 = 0,                                     INTROSCRUB_2000 = 0,                                     WATER_2000 = 0,                                     IDLE_2000 = 0,                                     URBAN_2000 = 0,                                     RICE_2000 = 0))) purrr::map(names(landscapes),            ~DeltaMultipleBenefits::transform_SDM(              pathin = 'SDM_results',              SDM = 'riparian',              landscape_name = .x,              modlist = BRT_riparian[1],              stat = 'equal_sens_spec',              pathout = 'SDM_results_threshold'))"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"waterbird-models","dir":"Articles","previous_headings":"Step 4. Estimating the net change in metrics informed by spatial models","what":"4.2 Waterbird models","title":"DeltaMultipleBenefits","text":"process fitting waterbird distribution models landscape similar process riparian landbirds, requires extra steps generate updated landscape data required. addition, two separate sets distribution models waterbird groups fall (July - mid-Nov) winter (mid-Nov - Mar) seasons, developed recognition seasonal changes species abundance well seasonal changes specific crop classes areas distinct winter crop. Therefore, original analysis, developed winter versions baseline scenario landscapes evaluation. However, demonstration purposes, generated one example scenario landscape.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"generate-updated-landscape-data","dir":"Articles","previous_headings":"Step 4. Estimating the net change in metrics informed by spatial models > 4.2 Waterbird models","what":"4.2.1 Generate updated landscape data","title":"DeltaMultipleBenefits","text":"waterbird distribution models require generating focal statistics representing landscape, similar riparian landbird distribution models, also require inputs representing covertype (categorical predictor land cover class cell), pwater (probability open water cell), droost (distance traditional nighttime crane roosts), may affected landscape scenario must also updated landscape evaluated. particular, pwater must updated prior generating focal statistics next step . update_covertype: Covertype categorical predictor reflecting land cover class pixel. Due original study design, subset land cover classes selected survey season thus included predictions future landscapes: managed wetlands, rice, alfalfa, irrigated pasture seasons, well corn winter wheat winter season. options different season, run function twice, specifying intended SDM; cover types encoded NA. result raster layer covertype.tif ready use distribution models, therefore pathout also intended directory eventual output python_focal_finalize . Note: example landscapes include surveyed land cover classes, result code include values Alfalfa Wetland. update_pwater: waterbird distribution models also included pwater indicating proportion original survey area flooded. prediction purposes, used information observed probability surface water present cell, season several years. surface water data derived Point Blue’s Water Tracker, analyzes remote sensing data detect surface water. However, scenario future landscape change, conversion grassland managed wetland, expect probability surface water also change. Therefore, baseline scenario landscape provided, function analyze provided pwater raster baseline land cover class identify average probability surface water, scenario, assigns expected probability surface water cells changed land cover class. one landscape provided, original baseline pwater raster layers Delta available download Zenodo doi: link TBD. , randomly generate example baseline pwater use function create updated pwater layer example scenario. update_roosts & python_dist: addition changes probability open water landscape, land cover changes may also affect suitability traditional night-time crane roosts. distance roost important predictor distribution models cranes, accounting loss traditional roost locations affect distances. original data source traditional roost locations included package, combined updated information becomes available. update_roosts function allows defining land cover class codes incompatible crane roosts, threshold proportion traditional crane roost polygon entire roost considered unsuitable. original analyses, considered crane roosts incompatible perennial crops, urban land cover, riparian vegetation, woodland, scrub, assumed 20% roost covered unsuitable land covers, roost location abandoned. result update_roosts intermediate file representing new assumed locations traditional roosts, used input python_dist use updating estimated distance roost predictor pixel landscape. Note: land cover types designated “unsuitable” use crane roost expected vary seasonally, need create separate versions corresponding fall winter waterbird SDMs.","code":"purrr::map(names(landscapes),            ~DeltaMultipleBenefits::update_covertype(              landscape = landscapes[[.x]],              landscape_name = .x,              key = key,              SDM = 'waterbird_fall',              pathout = 'SDM_predictors',              overwrite = TRUE))  purrr::map(names(landscapes),            ~DeltaMultipleBenefits::update_covertype(              landscape = landscapes[[.x]],              landscape_name = .x,              key = key,              SDM = 'waterbird_win',              pathout = 'SDM_predictors',              overwrite = TRUE)) pwater_base_fall = rast(landscapes$baseline,                    vals = runif(ncell(landscapes$baseline), min = 0, max = 1))  # here the first iteration is NULL for the scenario_landscape parameter, so the # function will simply copy the baseline version of pwater to the appropriate  # pathout directory; the second iteration will produce updated assumptions of  # pwater for the future scenario purrr::pmap(   list(scenario_landscape = list(NULL, scenario_example),        landscape_name = c('baseline', 'scenario_example')),   DeltaMultipleBenefits::update_pwater,   waterdat = pwater_base_fall,   pathout = 'SDM_predictors',   SDM = 'waterbird_fall',   overwrite = TRUE,   baseline_landscape = landscapes$baseline,   floor = FALSE)  # repeat for winter, assuming pwater values vary seasonally pwater_base_win = rast(landscapes$baseline,                        vals = runif(ncell(landscapes$baseline), min = 0, max = 1)) # --> Note: if we had different version of the landscape rasters for the winter  # season, we would also use those here. In this example, we assume land covers  # do not change seasonally.  purrr::pmap(   list(scenario_landscape = list(NULL, landscapes$scenario_example),        landscape_name = c('baseline', 'scenario_example')),   DeltaMultipleBenefits::update_pwater,   waterdat = pwater_base_win,   pathout = 'SDM_predictors',   SDM = 'waterbird_win',   overwrite = TRUE,   baseline_landscape = landscapes$baseline,   floor = FALSE) data(roosts_original)  DeltaMultipleBenefits::update_roosts(   landscape = landscapes$scenario_example,   landscape_name = 'scenario_example',   unsuitable = c(11:19, 60, 70:79, 100:120),   proportion = 0.2,   roosts = terra::vect(roosts_original),   pathout = 'SDM_predictors/crane_roosts',   overwrite = TRUE)  DeltaMultipleBenefits::python_dist(   pathin = 'SDM_predictors/crane_roosts',   landscape_name = 'scenario_example',   pathout = 'SDM_predictors',   SDM = 'waterbird_fall',   filename = 'droost_km.tif',   scale = 'km')"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"prepare-landscape-predictors-1","dir":"Articles","previous_headings":"Step 4. Estimating the net change in metrics informed by spatial models > 4.2 Waterbird models","what":"4.2.2 Prepare landscape predictors","title":"DeltaMultipleBenefits","text":"previous steps completed, especially update pwater, steps used riparian landbirds used generate focal statistics, also including focal statistics based pwater. python_focal_prep: Prepare land cover rasters riparian landbirds, splitting land cover classes separate layers aggregating needed waterbird models. time, cells land cover class present filled value corresponding area pixel, land cover layer also used mask corresponding updated pwater data, resulting second layer land cover class filled values corresponding probability flooded. Thus, two layers created land cover class, provide two custom suffix values distinguish files written pathout/SDM/landscape_name. python_focal_run: next step proceeds riparian landbirds , generating focal statistics separate land cover rasters generated previous step. However, waterbird models require focal statistics three different scales: 2000, 5000, 10000 (although waterbird_win models require 2000 scale), require separate processing _area layers (fun = 'SUM') _pfld layers (fun = 'MEAN'). use purrr::pmap() iterate combinations landscape, SDM, spatial scale, use optional regex parameter specify subset process batch. Note overwrite option function. files already exist pathout/SDM/landscape_name, return error. Previous versions deleted manually pathout changed. python_focal_finalize: Next, finalize results focal stats previous step generate predictors use waterbird distribution models. SDM = 'waterbird_fall' SDM = 'waterbird_win', result appending scale predictor name format “_2k”, “_5k”, “_10k”, expected original models. results written directory pathout/SDM/landscape_name.","code":"# waterbird_fall pwater_fall = list.files('SDM_predictors/waterbird_fall', 'pwater.tif$',                           full.names = TRUE) #pwater names should match landscape names names(pwater_fall) = names(landscapes)  purrr::map(names(landscapes),            ~DeltaMultipleBenefits::python_focal_prep(              landscape = landscapes[[.x]],              landscape_name = .x,              SDM = 'waterbird_fall',              mask = pwater_fall[[.x]],              pixel_value = 0.09,              pathout = 'SDM_predictors/cover',              suffix = c('_area', '_pfld')))  # waterbird_win pwater_win = list.files('SDM_predictors/waterbird_win', 'pwater.tif$',                          full.names = TRUE) #pwater names should match landscape names names(pwater_win) = names(landscapes)  purrr::map(names(landscapes),            ~DeltaMultipleBenefits::python_focal_prep(              landscape = scenarios[[.x]],              landscape_name = .x,              SDM = 'waterbird_win',              mask = pwater_win[[.x]],              pixel_value = 0.09,              pathout = 'SDM_predictors/cover',              suffix = c('_area', '_pfld'))) combos = bind_rows(   expand_grid(SDM = 'waterbird_fall',               landscape_name = names(scenarios),               scale = c('2000', '5000', '10000')),   expand_grid(SDM = 'waterbird_win',               landscape_name = names(scenarios),               scale = c('5000', '10000')))  # total area of each land cover class for each spatial scale, SDM, and landscape purrr::pmap(combos,             DeltaMultipleBenefits::python_focal_run,             pathin = 'SDM_predictors/cover',             pathout = 'SDM_predictors/focal_stats',             regex = '*_area.tif', fun = 'SUM')  # mean pfld for each land cover class for each spatial scale, SDM, and landscape purrr::pmap(combos,             DeltaMultipleBenefits::python_focal_run,             pathin = 'SDM_predictors/cover',             pathout = 'SDM_predictors/focal_stats',             regex = '*_pfld.tif', fun = 'MEAN') purrr::pmap(combos,             DeltaMultipleBenefits::python_focal_finalize,             pathin = 'SDM_predictors/focal_stats',             pathout = 'SDM_predictors',             cover = TRUE,             overwrite = TRUE))"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"generate-model-predictions-1","dir":"Articles","previous_headings":"Step 4. Estimating the net change in metrics informed by spatial models > 4.2 Waterbird models","what":"4.2.3 Generate model predictions","title":"DeltaMultipleBenefits","text":"fit_SDM: Use finalized predictors created previous step landscape fit distribution models 5 fall 6 winter waterbird groups. , modlist refer R object containing list fall winter waterbird distribution models. Similar riparian models, waterbird models included offset, predictor accounting variation survey effort, different values appiled predictions waterbird groups fall vs. winter, well separate value cranes geese fall (restricted fall season). addition, covertype area within survey conducted treated factor variable, must specified, available factor levels varied fall winter seasons. original analysis, also considered perennial crops, urban, barren land covers unsuitable waterbirds priori, specified unsuitable = c(10:19, 60, 130) (corresponding land cover class values); create mask provided landscape 0 values wherever land cover class equals values provided unsuitable NA elsewhere, used cover predicted values model. Thus, due distinct values offset, call fit_SDM three times: transform_SDM: , riparian landbirds, convert continuous probabilities waterbird group presence predicted previous step binary predictions presence absence.","code":"# fall: cranes, geese purrr::map(names(landscapes),            ~DeltaMultipleBenefits::fit_SDM(              pathin = 'SDM_predictors',              SDM = 'waterbird_fall',              landscape_name = .x,              modlist = waterbird_mods_fall[c('crane', 'geese')],              constants = data.frame(offset = 3.709),              factors = list(list('covertype' = c('Alfalfa',                                                  'Irrigated pasture',                                                  'Rice',                                                  'Wetland'))),              unsuitable = c(10:19, 60, 130),               landscape = landscapes[[.x]],              pathout = 'SDM_results'))  # fall: dblr, shore, cicon: purrr::map(names(landscapes),            ~DeltaMultipleBenefits::fit_SDM(              pathin = 'SDM_predictors',              SDM = 'waterbird_fall',              landscape_name = .x,              modlist = waterbird_mods_fall[c('dblr', 'cicon', 'shore')],              constants = data.frame(offset = 4.435),              factors = list(list('covertype' = c('Alfalfa',                                                  'Irrigated pasture',                                                  'Rice',                                                  'Wetland'))),              unsuitable = c(10:19, 60, 130),               landscape = landscapes[[.x]],              pathout = 'SDM_results'))  # winter: all purrr::map(names(landscapes),            ~DeltaMultipleBenefits::fit_SDM(              pathin = 'SDM_predictors',              SDM = 'waterbird_win',              landscape_name = .x,              modlist = waterbird_mods_win,              constants = data.frame(offset = 3.617),              factors = list(list('covertype' = c('Alfalfa',                                                  'Corn',                                                  'Irrigated pasture',                                                  'Rice',                                                  'Wetland',                                                  'Winter wheat'))),              unsuitable = c(10:19, 60, 130), #perennial crops, urban, barren              landscape = scenarios[[.x]],              pathout = 'SDM_results',              overwrite = TRUE)) purrr::map(names(landscapes),            ~DeltaMultipleBenefits::transform_SDM(              pathin = 'SDM_results',              SDM = 'waterbird_fall',              landscape_name = .x,              modlist = BRT_riparian[1],              stat = 'equal_sens_spec',              pathout = 'SDM_results_threshold'))  purrr::map(names(landscapes),            ~DeltaMultipleBenefits::transform_SDM(              pathin = 'SDM_results',              SDM = 'waterbird_win',              landscape_name = .x,              modlist = BRT_riparian[1],              stat = 'equal_sens_spec',              pathout = 'SDM_results_threshold'))"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"estimate-the-net-change-in-bird-habitat","dir":"Articles","previous_headings":"Step 4. Estimating the net change in metrics informed by spatial models","what":"4.3 Estimate the net change in bird habitat","title":"DeltaMultipleBenefits","text":"stage, steps estimating net change total amount habitat provided scenario riparian landbirds waterbird groups similar estimating net change area land cover class “simple metrics” . sum_habitat: Estimate total area landscape species predicted occupy. function similar sum_landcover, key differences. default, prediction rasters pathin argument subdirectories included, can handle results multiple scenarios multiple sets distribution models simultaneously. However, SDM SDM landscape_name can optionally specified limit predictions evaluated. addition, including option rollup = TRUE, total area occupied least one species set also calculated. default, result total count pixels predicted species presence, count can optionally multiplied area pixel providing pixel_area value desired units. also added mutate argument results clearly specify units used. Either way, results structured align results sum_metrics() used summarizing total landscapes scores simple metrics, habitat totals can appended results, net change can estimated simultaneously. sum_change: , use function estimate net change total area landscape species predicted occupy, indication net change total area suitable habitat species. Optionally habitat_totals can first appended scores (result sum_metrics()) calculate net change across benefits categories simultaneously include biodiversity support visualization results alongside categories benefits.","code":"habitat_totals = DeltaMultipleBenefits::sum_habitat(   pathin = 'SDM_results_threshold',   rollup = TRUE,   pixel_area = 0.09) %>%   dplyr::mutate(UNIT = 'ha') scores_change_habitat = DeltaMultipleBenefits::sum_change(habitat_totals)"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"supporting-data","dir":"Articles","previous_headings":"","what":"Supporting Data","title":"DeltaMultipleBenefits","text":"Baseline scenario rasters: Dybala KE. 2023. Baseline projected future land use land cover Sacramento-San Joaquin Delta. Available : https://wildlife.ca.gov/Data/BIOS Metrics (also included DeltaMultipleBenefits package): Dybala KE. 2023. Multiple-benefit Conservation Practice: Metrics Data Quantifying Multidimensional Impacts Landscape Change California’s Sacramento–San Joaquin Delta. doi: 10.5281/zenodo.7504874. Species distribution models: Dybala KE, Sesser KA, Reiter , Shuford WD, Golet GH, Hickey CM, Gardali T. 2023. Distribution models riparian landbirds waterbirds Sacramento-San Joaquin Delta. doi: 10.5281/zenodo.7531945. Supplemental spatial data: Dybala KE. 2023. Multiple-benefit Conservation Practice: Supplemental Spatial Data Quantifying Multidimensional Impacts Landscape Change California’s Sacramento–San Joaquin Delta. doi: 10.5281/zenodo.7672193.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/DeltaMultipleBenefits.html","id":"relevant-literature","dir":"Articles","previous_headings":"","what":"Relevant Literature","title":"DeltaMultipleBenefits","text":"Dybala K, Sesser K, Reiter M, Shuford WD, Golet GH, Hickey C, Gardali T (2023) Priority Bird Conservation Areas California’s Sacramento–San Joaquin Delta. San Francisco Estuary Watershed Science 21(3). DOI: 10.15447/sfews.2023v21iss3art4 Dybala KE, Reiter , Hickey CM (press) Multiple-benefit Conservation Practice: Framework Quantifying Multi-dimensional Impacts Landscape Change California’s Sacramento–San Joaquin Delta. San Francisco Estuary Watershed Science. Dybala KE, Sesser K, Reiter M, Hickey C, Gardali T (2023) Final Project Report: Trade-offs Co-benefits Landscape Change Scenarios Bird Communities Ecosystem Services Sacramento-San Joaquin River Delta. Point Blue Conservation Science, Petaluma, CA","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/tidal_wetland_restoration.html","id":"projecting-the-benefits-of-tidal-wetland-restoration-in-the-delta-and-suisun","dir":"Articles","previous_headings":"","what":"Projecting the Benefits of Tidal Wetland Restoration in the Delta and Suisun","title":"Tidal wetland restoration","text":"protect, restore, enhance Delta Ecosystem, Delta Plan defined targets increasing area natural vegetation communities 2050, including restoring 30,000 acres tidal wetland habitat. Meeting target expected support diverse populations native species, improve ecological processes functions, enhance resilience climate change, actual benefits meeting target likely depend tidal wetlands restored. leading research estimate potential benefits tidal wetland restoration Delta’s bird community. project builds flexible, open-source “Delta Multiple Benefits” framework evaluating benefits trade-offs landscape changes Sacramento-San Joaquin Delta. now beginning develop scenarios representing different ways Delta Plan’s tidal wetland restoration targets may reached Delta Suisun Marsh, including future projects currently proposal planning stages additional restored acres plausible locations needed meet target.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/tidal_wetland_restoration.html","id":"the-approach","dir":"Articles","previous_headings":"","what":"The Approach","title":"Tidal wetland restoration","text":"Account existing tidal wetlands planned restoration projects Distribute additional acres hypothetical projects needed meet restoration objectives Start footprint potential tidal wetland: intertidal minimally subsided potential marsh Identify areas within footprint likely restored Map existing potential tidal wetland, shown restoration projects planned, progress, completed:","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/tidal_wetland_restoration.html","id":"potental-tidal-wetland-vs--objectives","dir":"Articles","previous_headings":"","what":"Potental Tidal Wetland vs. Objectives","title":"Tidal wetland restoration","text":"2025, approximately half acres needed meet restoration target either planned, progress, completed. Based estimates current intertidal minimally subsided land, land elevations potentially suitable tidal wetland restoration unevenly distributed among regions Delta Suisun Marsh. Summary potential suitable tidal wetland acres region:","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/articles/tidal_wetland_restoration.html","id":"help-us-envision-a-tidal-wetland-restoration-scenario","dir":"Articles","previous_headings":"","what":"Help us Envision a Tidal Wetland Restoration Scenario","title":"Tidal wetland restoration","text":"currently seeking input approaches developing tidal wetland restoration scenarios meets Delta Plan target. seek represent extent possible spatial distribution tidal wetlands restoration target reached, evaluate potential benefits trade-offs meeting target. Key Questions: planned proposed restoration projects yet shown map? (see map ) additional projects (least) likely? example, key constraints priorities terms region, landowner, current landuse/land cover, factors? alternate strategies meeting Delta Plan target consideration? alternate scenarios compare? like contribute, please contact kdybala [] pointblue.org! project supported California Department Fish Wildlife Water Quality, Supply, Infrastructure Improvement Act 2014 (Proposition 1, CWC § 79707), grant agreement number Q2296017.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kristen Dybala. Author, maintainer.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dybala K (2025). DeltaMultipleBenefits: Projecting Multiple Benefits Land Cover Change Sacramento-San Joaquin River Delta. R package version 1.0.0, https://github.com/pointblue/DeltaMultipleBenefits.","code":"@Manual{,   title = {DeltaMultipleBenefits: Projecting the Multiple Benefits of Land Cover Change in the Sacramento-San Joaquin River Delta},   author = {Kristen Dybala},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/pointblue/DeltaMultipleBenefits}, }"},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Projecting the Multiple Benefits of Land Cover Change in the Sacramento-San Joaquin River Delta","text":"DeltaMultipleBenefits R package serves open-source, science-based framework estimating net impacts scenarios landscape change multiple metrics interest. intended support land use planning, management, conservation, community engagement Sacramento-San Joaquin River Delta identifying potential benefits trade-offs proposed anticipated changes land cover. help needed! currently seeking input approaches developing tidal wetland restoration scenarios. Please see recent article information.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Projecting the Multiple Benefits of Land Cover Change in the Sacramento-San Joaquin River Delta","text":"can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"pointblue/DeltaMultipleBenefits\")"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/index.html","id":"how-to-use","dir":"","previous_headings":"","what":"How to use","title":"Projecting the Multiple Benefits of Land Cover Change in the Sacramento-San Joaquin River Delta","text":"package provides tools evaluating land cover rasters supplied user estimate magnitude benefits associated landscape differences benefits among landscapes, current baseline land cover proposed anticipated alternative land cover.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/index.html","id":"benefit-categories-and-metrics","dir":"","previous_headings":"How to use","what":"Benefit Categories and Metrics","title":"Projecting the Multiple Benefits of Land Cover Change in the Sacramento-San Joaquin River Delta","text":"benefit categories currently addressed include: Agricultural Livelihoods, Water Quality, Climate Change Resilience, Biodiversity Support. category represented multiple metrics, currently one two types: simple metrics: quantitative values qualitative scores assigned land cover class summarized entire landscape spatial models: models require information spatial distribution land covers estimate total value, total suitable habitat estimated species distribution model simple metrics species distribution models already developed framework available download: Metrics Data Quantifying Multidimensional Impacts Landscape Change California’s Sacramento–San Joaquin Delta. DOI: 10.5281/zenodo.7504874 (also included DeltaMultipleBenefits package) Distribution models riparian landbirds waterbirds Sacramento-San Joaquin Delta. DOI: 10.5281/zenodo.7531945 framework still development designed readily incorporate additional species, models, data, metrics. Please contact us collaborate incorporating additional metrics data.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/index.html","id":"scenarios--alternative-landscapes","dir":"","previous_headings":"How to use","what":"Scenarios & Alternative Landscapes","title":"Projecting the Multiple Benefits of Land Cover Change in the Sacramento-San Joaquin River Delta","text":"comparing landscape totals metric estimated baseline landscape alternative landscapes representing proposed anticipated changes, expected direction magnitude net change metric estimated. initial development framework, built simple alternative landscapes representing changes driven one two individual drivers landscape change, allowing evaluation individual impacts. However, complex realistic scenarios future landscape change can also evaluated. landscapes already developed framework available download, including baseline landscape, restoration landscape representing Delta Plan restoration targets non-tidal wetlands riparian habitat, perennial crop expansion landscape, combination restoration perennial crop expansion. Baseline projected future land use land cover Sacramento-San Joaquin Delta (including predicted presence focal taxa baseline conditions)","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/index.html","id":"evaluating-new-scenarios","dir":"","previous_headings":"How to use","what":"Evaluating New Scenarios","title":"Projecting the Multiple Benefits of Land Cover Change in the Sacramento-San Joaquin River Delta","text":"package includes vignette serves tutorial outlining major steps analyzing alternative Delta landscapes comparing , including: Preparing new landscape scenarios analysis Summarizing net change total area land cover class Estimating net change simple metrics Estimating net change metrics informed spatial models","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/index.html","id":"supporting-information","dir":"","previous_headings":"","what":"Supporting Information","title":"Projecting the Multiple Benefits of Land Cover Change in the Sacramento-San Joaquin River Delta","text":"Dybala KE, Sesser K, Reiter M, Hickey C, Gardali T. 2023. Final Project Report: Trade-offs Co-benefits Landscape Change Scenarios Bird Communities Ecosystem Services Sacramento-San Joaquin River Delta. Point Blue Conservation Science, Petaluma, CA Dybala K, Sesser K, Reiter M, Shuford WD, Golet GH, Hickey C, Gardali T (2023) Priority Bird Conservation Areas California’s Sacramento–San Joaquin Delta. San Francisco Estuary Watershed Science 21(3). DOI: 10.15447/sfews.2023v21iss3art4 Dybala KE, Reiter , Hickey CM (press) Multiple-benefit Conservation Practice: Framework Quantifying Multi-dimensional Impacts Landscape Change California’s Sacramento–San Joaquin Delta. San Francisco Estuary Watershed Science. Supplemental Spatial Data Quantifying Multidimensional Impacts Landscape Change California’s Sacramento–San Joaquin Delta. DOI: 10.5281/zenodo.7672193","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/index.html","id":"funding-statement","dir":"","previous_headings":"","what":"Funding Statement","title":"Projecting the Multiple Benefits of Land Cover Change in the Sacramento-San Joaquin River Delta","text":"data originally developed part project Trade-offs Co-benefits Landscape Change Bird Communities Ecosystem Services Sacramento–San Joaquin River Delta, funded Proposition 1 Delta Water Quality Ecosystem Restoration Program, Grant Agreement Number – Q1996022, administered California Department Fish Wildlife. second phase development currently underway, Trade-offs Co-benefits Landscape Change Sacramento-San Joaquin River Delta: Phase II Tidal Wetlands Restoration, funded Water Quality, Supply, Infrastructure Improvement Act 2014 (Proposition 1, CWC § 79707), grant agreement number Q2296017, administered California Department Fish Wildlife.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/calc_change_SDM.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the difference between predictions of species presence for a baseline and scenario landscape — calc_change_SDM","title":"Calculate the difference between predictions of species presence for a baseline and scenario landscape — calc_change_SDM","text":"Calculate difference predictions species presence baseline scenario landscape","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/calc_change_SDM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the difference between predictions of species presence for a baseline and scenario landscape — calc_change_SDM","text":"","code":"calc_change_SDM(   pathin,   SDM,   baseline_name,   scenario_name,   pathout,   overwrite = FALSE,   differentiate = TRUE )"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/calc_change_SDM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the difference between predictions of species presence for a baseline and scenario landscape — calc_change_SDM","text":"pathin, SDM Character strings defining filepath (pathin/SDM) containing predicted probability presence resulting distribution model, created running fit_SDM() transform_SDM(); SDM must one \"riparian\", \"waterbird_fall\", \"waterbird_win\". baseline_name Character string defining filepath (pathin/SDM/baseline_name) containing predictions baseline landscape scenario_name Character string defining filepath (pathin/SDM/scenario_name) containing predictions scenario landscape pathout Character string defining filepath (pathout/SDM/scenario_name) results written overwrite Logical; passed terra::writeRaster(); default FALSE differentiate Logical; TRUE, locations predicted value zero landscapes converted NA","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/calc_change_SDM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the difference between predictions of species presence for a baseline and scenario landscape — calc_change_SDM","text":"Nothing; output written pathout/SDM/scenario_name","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/calc_change_SDM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the difference between predictions of species presence for a baseline and scenario landscape — calc_change_SDM","text":"function designed handle predictions multiple species provided rasters baseline scenario directories, matched name. difference calculated predicted value scenario minus predicted value baseline, positive values result represent increased probability presence, negative values represent reduced probability presence. differentiate = TRUE, function also designed distinguish two types zero values result: locations predicted value landscapes (retain value zero difference), locations predicted value zero landscapes (converted NA).","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/calc_change_SDM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the difference between predictions of species presence for a baseline and scenario landscape — calc_change_SDM","text":"","code":"# See vignette"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/create_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"create_directory — create_directory","title":"create_directory — create_directory","text":"Helper function called within functions check whether intended output directory exists, , create . Particularly useful many files generated programmatically expected structure.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/create_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_directory — create_directory","text":"","code":"create_directory(filepath)"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/create_directory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_directory — create_directory","text":"filepath character string representing file path","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/create_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create_directory — create_directory","text":"Prints either \"Creating directory: filepath\" directory already exist, \"Writing directory: filepath\" already exist.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/create_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create_directory — create_directory","text":"","code":"if (FALSE) { # \\dontrun{ create_directory(filepath = \"Desktop/example\")  # will create nested directories as needed create_directory(filepath = \"Desktop/example/test\") } # }"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/fit_SDM.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply species distribution models to new landscapes. — fit_SDM","title":"Apply species distribution models to new landscapes. — fit_SDM","text":"Fit previously-developed species distribution models riparian landbird species waterbird groups fall winter new set predictors, derived new scenario landscape change.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/fit_SDM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply species distribution models to new landscapes. — fit_SDM","text":"","code":"fit_SDM(   pathin,   SDM,   landscape_name,   modlist,   constants = NULL,   factors = NULL,   landscape = NULL,   unsuitable = NULL,   pathout,   overwrite = FALSE )"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/fit_SDM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply species distribution models to new landscapes. — fit_SDM","text":"pathin, SDM, landscape_name Character strings defining filepath (pathin/SDM/landscape_name) containing new predictor rasters include model, created running python_focal_finalize() modlist List model objects class 'gbm' representing distribution models new predictors fit. constants optional dataframe containing predictors constant value applied pixels. See Details. factors optinal list named lists defining categorical predictors included distribution models. See Details. landscape optional SpatRaster corresponding landscape represented predictors contained pathin/landscape_name, used identify locations unsuitable land covers. Must provided unsuitable NULL. unsuitable optional vector numerical values representing land cover classifications considered unsuitable priori. NULL, landcape must also provided. pathout Character string defining filepath (pathout/SDM/landscape_name) output rasters written overwrite Logical; passed terra::writeRaster()","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/fit_SDM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply species distribution models to new landscapes. — fit_SDM","text":"Nothing returned R environment. Writes rasters pathout model modlist","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/fit_SDM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply species distribution models to new landscapes. — fit_SDM","text":"function designed fit multiple distribution models set predictors describing given landscape. New predictors must first created named match predictors included original models, e.g. using python_focal_prep(), python_focal_run(), python_focal_finalize(). constants passed terra::predict() provide way include constant values one predictors applied pixels. riparian waterbird models, include predictor representing effort ('area.ha' riparian landbirds 'offset' waterbirds). riparian landbird models applied Delta, constants also include region predictor used categorical predictor representing Sacramento Valley (0) Delta San Joaquin Valley (1). (See vignette) factors also passed terra::predict() provide way define categorical predictors. waterbird models, necessary define 'covertype' predictor. (See vignette) unsuitable land covers presumed predicted value zero. locations unsuitable landcovers extracted landscape, assigned value zero, overlaid model predictions.","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/fit_SDM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply species distribution models to new landscapes. — fit_SDM","text":"","code":"# See vignette"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/key.html","id":null,"dir":"Reference","previous_headings":"","what":"Land cover classification scheme for the DeltaMultipleBenefits framework — key","title":"Land cover classification scheme for the DeltaMultipleBenefits framework — key","text":"Major land cover classes subclasses designed work existing metrics species distribution models within DeltaMultipleBenefits framework. includes natural agricultural land cover classes, organized hierarchically major land cover classes subclasses. Also included default values labels color coding used maps.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Land cover classification scheme for the DeltaMultipleBenefits framework — key","text":"","code":"key"},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/key.html","id":"key-a-data-frame-with-rows-and-columns-","dir":"Reference","previous_headings":"","what":"key A data frame with 41 rows and 7 columns:","title":"Land cover classification scheme for the DeltaMultipleBenefits framework — key","text":"CODE_BASELINE Numeric value used encode rasters CODE_NAME Text string joining major land cover classes subclasses '_' CLASS Major land cover class grouping SUBCLASS Land cover subclass DETAIL land cover detail LABEL Default value labels used maps plots COLOR Default hex color code used maps","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/key.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Land cover classification scheme for the DeltaMultipleBenefits framework — key","text":"Dybala et al. prep (URL determined)","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Metrics by land cover class and benefits category — metrics","title":"Metrics by land cover class and benefits category — metrics","text":"Estimated mean value standard error metric land cover class, used within DeltaMultipleBenefits framework estimate total score given landscape net change expected result change landscapes.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metrics by land cover class and benefits category — metrics","text":"","code":"metrics"},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/metrics.html","id":"metrics-a-data-frame-with-rows-and-columns-","dir":"Reference","previous_headings":"","what":"metrics A data frame with 276 rows and 7 columns:","title":"Metrics by land cover class and benefits category — metrics","text":"METRIC_CATEGORY Character string; metrics organized groups benefits categories METRIC Character string; metric name UNIT Character string; units metric presented, usually per hectare CODE_NAME Text string joining major land cover classes subclasses '_' LABEL Default value labels used represent CODE_NAME maps plots SCORE_MEAN Numeric; mean value metric land cover class SCORE_SE Numeric; standard error mean","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/metrics.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Metrics by land cover class and benefits category — metrics","text":"Dybala et al. prep (URL determined)","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Euclidean distance via Python — python_dist","title":"Calculate Euclidean distance via Python — python_dist","text":"Function call python script calculating Euclidean distances landscape rasters via arcpy.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Euclidean distance via Python — python_dist","text":"","code":"python_dist(   pathin,   landscape_name,   pathout,   SDM,   filename = \"droost_km.tif\",   scale = NULL,   mask = NULL,   overwrite = FALSE )"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Euclidean distance via Python — python_dist","text":"pathin, landscape_name Character strings defining filepath (pathin/landscape_name) input rasters located, created running python_focal_prep() update_roosts() pathout, SDM Additional character strings defining filepath (pathout/SDM/landscape_name) output raster written filename name output raster, including file extension; default 'droost_km.tif', name predictor required waterbird models scale Optional character string scaling results; See Details mask Optional SpatRaster character string giving filepath raster used mask output, e.g. study area boundary overwrite Logical; passed terra::writeRaster(); apply intermediate step writing droost_raw.tif","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Euclidean distance via Python — python_dist","text":"Nothing; files written pathout/SDM/landscape_name","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Euclidean distance via Python — python_dist","text":"Calls dist_stats.py function calculate Euclidean distance cells input raster without value nearest cell value (e.g., calculating distance crane roost stream). Raw python results written pathin/landscape_name/droost_raw.tif, optionally scaled /masked, writing final output pathout/SDM/landscape_name/. Currently supported scale options include: km divide results 1000 return distances kilometers sqrt take square root results. Important: function requires availability arcpy Spatial Analyst extensions. statistics can entirely calculated R, arcpy much faster. Note: initial raw output dist_stats.py pathin/landscape_name/droost_raw.tif overwrite existing rasters; old versions must deleted re-running.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Euclidean distance via Python — python_dist","text":"","code":"# See vignette"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_finalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Final processing of focal stats for SDMs — python_focal_finalize","title":"Final processing of focal stats for SDMs — python_focal_finalize","text":"Renames rescales output python_focal_run() needed match expected inputs species distribution models (SDMs). Includes options mask another raster fill missing values zero.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_finalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Final processing of focal stats for SDMs — python_focal_finalize","text":"","code":"python_focal_finalize(   pathin,   landscape_name,   SDM,   scale,   pathout,   overwrite = FALSE,   mask = NULL,   cover = FALSE )"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_finalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Final processing of focal stats for SDMs — python_focal_finalize","text":"pathin, SDM, landscape_name, scale Character strings defining filepath (pathin/SDM/landscape_name,scale) containing input rasters processed, created running python_focal_run() pathout Character string defining filepath (pathout/SDM/landscape_name) output rasters written overwrite Logical; passed terra::writeRaster() mask Optional SpatRaster character string giving filepath raster used mask output, e.g. study area boundary cover Logical; default FALSE. TRUE, mask must NULL; See Details.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_finalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Final processing of focal stats for SDMs — python_focal_finalize","text":"Nothing returned R environment. Writes rasters pathout land cover class.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_finalize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Final processing of focal stats for SDMs — python_focal_finalize","text":"Function expects source files directory structure created python_focal_run(), also used inform final processing steps: pathin/SDM/landscape_name/scale. .tif files source directory read , optionally masked raster mask. cover = TRUE, pixels mask value 1 also replaced value 0, passed terra::cover() fill missing values source data zero. SDM = \"riparian\", pixel counts converted proportion total number cells expected within buffer distance represented scale, scale appended predictor name format \"_50\" \"_2000\", expected riparian SDMs. SDM = \"waterbird_fall\" SDM = \"waterbird_win\", scale appended predictor name format \"_2k\", \"_5k\", \"_10k\", expected waterbird SDMs. final rasters written directory pathout/SDM/landscape_name, created yet exist.","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_finalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Final processing of focal stats for SDMs — python_focal_finalize","text":"","code":"# See vignette"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare landscape rasters for focal statistics via Python — python_focal_prep","title":"Prepare landscape rasters for focal statistics via Python — python_focal_prep","text":"Prepare running focal statistics landscape raster via Python, generate inputs use species distribution models.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare landscape rasters for focal statistics via Python — python_focal_prep","text":"","code":"python_focal_prep(   landscape,   SDM,   pathout,   landscape_name,   suffix = NULL,   mask = NULL,   pixel_value = NULL,   overwrite = FALSE )"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare landscape rasters for focal statistics via Python — python_focal_prep","text":"landscape SpatRaster created terra::rast() SDM name intended species distribution model, landscape reclassified: \"riparian\", \"waterbird_fall\", \"waterbird_win\" pathout, landscape_name Character strings defining filepath (pathout/SDM/landscape_name) output rasters written suffix Character string; custom suffix appended layer names (optional unless mask NULL) mask Optional SpatRaster; see Details pixel_value Numeric value replace cell values (optional); default NULL overwrite Logical; passed terra::writeRaster(); default FALSE","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare landscape rasters for focal statistics via Python — python_focal_prep","text":"Nothing returned R environment. Writes rasters pathout land cover class.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_prep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare landscape rasters for focal statistics via Python — python_focal_prep","text":"Splits landscape raster separate layers representing presence (1) absence (0) land cover class, regroups renames land cover classes used intended species distribution model (SDM), optional custom suffix appended layer name. Cell values representing land cover presence (1) can also optionally replaced different pixel_value (e.g., area pixel). providing mask, function can also optionally use land cover presence layers mask extract values another layer (e.g., surface water data). distinguish layers, suffix required two values. See examples.","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare landscape rasters for focal statistics via Python — python_focal_prep","text":"","code":"#f <- system.file(\"ex/elev.tif\", package=\"terra\") #r <- terra::rast(f) # add an example #python_prep(landscape = r, SDM = 'riparian', pathout = 'example')  #try(python_prep(landscape = r, SDM = 'waterbird_win', pathout = 'example', #pixel_value = 0.09, mask = system.file('ex/elev.tif', package = 'terra'))) ## suffix is required if mask is not `NULL`  #python_prep(landscape = r, SDM = 'waterbird_win', pathout = 'example', #pixel_value = 0.09, mask = system.file('ex/elev.tif', package = 'terra'), #suffix = c('_area', '_elev'))"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run focal statistics via Python — python_focal_run","title":"Run focal statistics via Python — python_focal_run","text":"Function call python script calculating focal statistics landscape rasters via arcpy.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run focal statistics via Python — python_focal_run","text":"","code":"python_focal_run(   pathin,   landscape_name,   SDM,   regex = NULL,   scale,   fun = \"SUM\",   pathout )"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run focal statistics via Python — python_focal_run","text":"pathin, SDM, landscape_name Character strings defining filepath (pathin/SDM/landscape_name) containing input rasters processed, created running python_focal_prep() regex Optional regular expression process subset rasters pathin/SDM/landscape_name scale String representing buffer size (m) within focal stats calculated fun Function summarize focal statistics: 'SUM' 'MEAN' pathout Filepath directory output rasters written","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run focal statistics via Python — python_focal_run","text":"Nothing returned R environment. Writes rasters pathout land cover class.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_run.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run focal statistics via Python — python_focal_run","text":"function calls focal_stats.py function summarize cell values input raster within buffer distance defined scale. Summary functions may include 'SUM' 'MEAN'. default fun = SUM' intended called first running python_focal_prep(), prepares rasters representing presence/absence individual land cover classes, defined set species distribution models, allows 'SUM' effectively count number pixels land cover class within given distance. function can also used fun = 'MEAN' estimate mean probability open water given land cover class within given distance (.e. _pfld predictors waterbird models). See vignette. Important: function requires availability arcpy Spatial Analyst extensions. statistics can entirely calculated R, arcpy much faster. See vignette details.","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/python_focal_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run focal statistics via Python — python_focal_run","text":"","code":"# See vignette"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/reclassify_landcover.html","id":null,"dir":"Reference","previous_headings":"","what":"Reclassify landscape rasters by SDM — reclassify_landcover","title":"Reclassify landscape rasters by SDM — reclassify_landcover","text":"Prepare fitting SDMs reclassifying landscape rasters according classifications used specific species distribution model (SDM).","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/reclassify_landcover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reclassify landscape rasters by SDM — reclassify_landcover","text":"","code":"reclassify_landcover(landscape_stack, SDM)"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/reclassify_landcover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reclassify landscape rasters by SDM — reclassify_landcover","text":"landscape_stack SpatRaster created terra::rast() SDM name intended species distribution model: \"riparian\", \"waterbird_fall\", \"waterbird_win\"","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/reclassify_landcover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reclassify landscape rasters by SDM — reclassify_landcover","text":"SpatRaster layers land cover class","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/reclassify_landcover.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reclassify landscape rasters by SDM — reclassify_landcover","text":"function called python_focal_prep() set landscape rasters generated segregating input landscape class. intended called directly.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/reclassify_landcover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reclassify landscape rasters by SDM — reclassify_landcover","text":"","code":"#r <- terra::rast(matrix(sample(c(0:4), size = 100, replace = TRUE), #         ncol = 10, nrow = 10) #levels(r) <- c('RIPARIAN_FOREST_POFR', 'RIPARIAN_FOREST_QULO', 'WETLAND', 'ORCHARD', 'VINEYARD') #layernames = terra::freq(r)$label #s = terra::segregate(r, other = 0) #names(s) = terra::freq(r)$label #example = reclassify_landcover(s, SDM = 'RIPARIAN')"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/roosts_original.html","id":null,"dir":"Reference","previous_headings":"","what":"Traditional nighttime crane roost locations — roosts_original","title":"Traditional nighttime crane roost locations — roosts_original","text":"Original crane roost locations used generating \"distance roost\" predictor variable used crane distribution models within DeltaMultipleBenefits framework. assumed future locations roosts scenarios landscape change may require modification land covers become incompatible (see update_roosts())","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/roosts_original.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Traditional nighttime crane roost locations — roosts_original","text":"","code":"roosts_original"},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/roosts_original.html","id":"roosts-original-a-simple-features-collection-with-geometries-","dir":"Reference","previous_headings":"","what":"roosts_original A simple features collection with 94 geometries 1","title":"Traditional nighttime crane roost locations — roosts_original","text":"attribute field: Roost_ID Numeric value used identify distinct roosts","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize net change between scenario and baseline landscapes — sum_change","title":"Summarize net change between scenario and baseline landscapes — sum_change","text":"Calculate difference landscape-level metric totals baseline landscape one scenario landscapes","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize net change between scenario and baseline landscapes — sum_change","text":"","code":"sum_change(dat, k = 2)"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize net change between scenario and baseline landscapes — sum_change","text":"dat tibble; see Details k coverage factor; see Details","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize net change between scenario and baseline landscapes — sum_change","text":"tibble containing fields SCENARIO_VALUE, BASELINE_VALUE, net_change, optionally SCENARIO_SE, BASELINE_SE, net_change_se, U, lcl, ucl, z; see Details","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_change.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize net change between scenario and baseline landscapes — sum_change","text":"function expects dat contain following fields: scenario: character field used identify name landscape examined; one must called 'baseline' others treated alternate scenarios comparison baseline either area SCORE_TOTAL: numeric fields representing total landscape-level values metric, produced sum_landcover() sum_metrics(). scores scenario aligned corresponding scores baseline landscape based common fields (e.g. ZONE, METRIC_CATEGORY) net difference calculated scenario score minus baseline score. function returns original baseline scenario total landscape scores metric scenario (renamed BASELINE SCENARIO), along net_change. SCORE_TOTAL_SE also provided dat, representing uncertainty SCORE_TOTAL, uncertainty difference (net_change_se) also calculated : sqrt(BASELINE_SE^2 + SCENARIO_SE^2) BASELINE_SE SCENARIO_SE represent SCORE_TOTAL_SE baseline scenario landscapes, respectively. addition, coverage factor k used estimate expanded uncertainty (U), interval within large fraction distribution values reasonably expected. appropriate value k depends level confidence required, number observations uncertainty based, knowledge underlying distributions estimates. distributions concerned normal, purposes, value 2 recommended  give interval containing approximately 95% distribution values. case, function also returns original uncertainty estimates baseline scenario (renamed BASELINE_SE SCENARIO_SE), net_change_se, expanded uncertainty estimate U corresponding lcl ucl, well z score equal abs(net_change/net_change_se).","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize net change between scenario and baseline landscapes — sum_change","text":"","code":"# See vignette"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_habitat.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize total habitat scores — sum_habitat","title":"Summarize total habitat scores — sum_habitat","text":"Calculate sum predicted presence/absence probability presence species distribution models corresponding set landscape rasters.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_habitat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize total habitat scores — sum_habitat","text":"","code":"sum_habitat(   pathin,   SDM = NULL,   landscape_name = NULL,   zones = NULL,   subtype = NULL,   rollup = TRUE,   key = NULL,   scale = NULL )"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_habitat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize total habitat scores — sum_habitat","text":"pathin Character string defining filepath highest-level directory containing predicted presence/absence probability presence species distribution models, created running fit_SDM() transform_SDM() SDM, landscape_name Optional character strings defining subdirectories within pathin habitat summarized; see Details; SDM must one \"riparian\", \"waterbird_fall\", \"waterbird_win\". zones Optional SpatRaster character string giving filepath raster encoding zones within pixel values summarized subtype Optional character string appended field METRIC_SUBTYPE, distinguishing probability presence presence/absence rollup Logical; TRUE (default), summarize total habitat across species/groups set SDMs key Optional tibble, dataframe, character string defining filepath passed readr::read_csv(), used translate individual species names encoded file names pathin readable METRIC names output table; see Details scale Optional value scale results; see Details","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_habitat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize total habitat scores — sum_habitat","text":"tibble","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_habitat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize total habitat scores — sum_habitat","text":"default, function calculate sum pixel values raster found pathin subdirectories, efficiently process multiple rasters located pathin directory . file structure within pathin used infer name corresponding SDM landscape_name. However, SDM SDM landscape_name can optionally specified process subset . provided, key refer tibble, dataframe, filepath CSV containing fields spp label, used converting filenames rasters within pathin readable label, renamed METRIC final output. provided, sum pixel values multiplied scale. example, rescale total terms total area, enter area pixel.","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_habitat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize total habitat scores — sum_habitat","text":"","code":"# See vignette"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_landcover.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize total area of land cover classes — sum_landcover","title":"Summarize total area of land cover classes — sum_landcover","text":"Summarize area number pixels land cover class set landscape rasters","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_landcover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize total area of land cover classes — sum_landcover","text":"","code":"sum_landcover(   landscapes,   mask = NULL,   zones = NULL,   pixel_area = 1,   rollup = TRUE )"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_landcover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize total area of land cover classes — sum_landcover","text":"landscapes Either SpatRaster one layers, character string giving filepath directory containing one raster landscapes (e.g. scenarios) summarized. mask Optional SpatRaster character string giving filepath raster used mask output, e.g. study area boundary zones Optional SpatRaster character string giving filepath raster encoding zones within pixel values summarized pixel_area Numeric value representing area pixel; hectares preferred units may provided; default 1, resulting total count rollup Logical; whether riparian managed wetland subclasses rolled total area riparian managed wetlands, respectively. See Details.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_landcover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize total area of land cover classes — sum_landcover","text":"tibble","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_landcover.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize total area of land cover classes — sum_landcover","text":"function summarize frequency pixels land cover class landscape raster, either provided SpatRaster created terra::rast() one layers, filepath directory containing one tif raster files summarized. function generally agnostic names rasters land cover classes expects, expect rasters unique names land cover class levels defined (.e., just contain numeric codes; see terra::levels()). However, rollup = TRUE (default), riparian managed wetland subclasses expected names begin 'RIPARIAN_' 'WETLAND_MANAGED_'. subclasses summarized total area 'RIPARIAN' 'WETLAND_MANAGED' land cover classes. function relies terra::freq() summarize total number cells value within raster optionally zone provided, multiplied pixel_area estimate total area land cover class landscape. value pixel_area can provided units prefer, function intended produce areadat use sum_metrics(), recommend using hectares ensure alignment units metrics estimated. default, total area unique land cover class summarized entire raster provided, optionally, area can subset providing mask /zones. mask single SpatRaster filepath tif raster file passed terra::mask() exclude areas NA values. addition, zones single SpatRaster filepath tif raster file passed terra::zonal(). Values zones define two unique regions within area land cover class summarized, names region defined (see terra::levels()).","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_landcover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize total area of land cover classes — sum_landcover","text":"","code":"# See vignette"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize total metric scores — sum_metrics","title":"Summarize total metric scores — sum_metrics","text":"Calculate landscape-level sum metrics set landscape rasters","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize total metric scores — sum_metrics","text":"","code":"sum_metrics(metricdat, areadat)"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize total metric scores — sum_metrics","text":"metricdat tibble; See Details areadat tibble; See Details","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize total metric scores — sum_metrics","text":"tibble","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize total metric scores — sum_metrics","text":"function combine landscape-specific estimates total area land cover class provided areadat (optionally also zone; see sum_landcover()) per-unit-area metrics associated land cover class provided metricdat. two data sets joined fields common, minimum include field containing land cover classes. metrics, scores calculated multiplying total area corresponding per-unit-area metric summing entire landscape. However, Annual Wages associated agricultural jobs, weighted average instead produced, based average wage agricultural job associated land cover class proportion landscape associated wage (.e., crop classes) made land cover class. addition, metrics representing Climate Change Resilience category, overall landscape average score produced. function expects metricdat contain following fields: class: character field containing land cover classes; may called anything, match corresponding field areadat METRIC: character field used define specific metrics; expects METRIC called \"Annual Wages\" SCORE_MEAN, SCORE_SE: numeric fields containing specific values METRIC estimate uncertainty METRIC_CATEGORY, UNIT: optional additional character fields useful grouping METRICS tracking units; may contain anything, retained output. UNIT present, \"/ha\" removed results returning, reminder resulting total scores longer per-hectare. function also expects areadat contain following fields: scenario: character field used identify name landscape examined class: , character field containing land cover classes; may called anything, match corresponding field metricdat area: numeric field containing total area land cover class. Take care units area field calculated correspond UNITs per-unit-area METRICS metricdat defined (often ha). (See sum_landcover().) ZONE: optional character field identifying name zone within area land covers estimated, running sum_landcover() zones provided; ZONE present, output summarized zone.","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/sum_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize total metric scores — sum_metrics","text":"","code":"# See vignette"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/transform_SDM.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform predictions from species distribution models to binary — transform_SDM","title":"Transform predictions from species distribution models to binary — transform_SDM","text":"Use model-specific threshold values transform predicted probabilities species presence, resulting fit_SDM(), binary predictions presence absence.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/transform_SDM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform predictions from species distribution models to binary — transform_SDM","text":"","code":"transform_SDM(   pathin,   SDM,   landscape_name,   modlist,   stat,   pathout,   overwrite = FALSE )"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/transform_SDM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform predictions from species distribution models to binary — transform_SDM","text":"pathin, SDM, landscape_name Character strings defining filepath (pathin/SDM/landscape_name) containing predicted probability presence resulting distribution model, created running fit_SDM(); SDM must one \"riparian\", \"waterbird_fall\", \"waterbird_win\". modlist List model objects class 'gbm' representing distribution models new predictors fit. stat Character string defining threshold statistic used; see dismo::threshold() options pathout Filepath directory results rasters written (pathout/SDM/landscape_name) overwrite Logical; passed terra::writeRaster()","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/transform_SDM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform predictions from species distribution models to binary — transform_SDM","text":"Nothing returned R environment. Writes rasters pathout/SDM/landscape_name model modlist","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/transform_SDM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform predictions from species distribution models to binary — transform_SDM","text":"","code":"# See vignette"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_covertype.html","id":null,"dir":"Reference","previous_headings":"","what":"Update waterbird predictors: covertype — update_covertype","title":"Update waterbird predictors: covertype — update_covertype","text":"Helper function updating covertype predictors waterbird distribution models.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_covertype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update waterbird predictors: covertype — update_covertype","text":"","code":"update_covertype(   landscape,   key,   SDM,   mask = NULL,   pathout,   landscape_name,   overwrite = FALSE )"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_covertype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update waterbird predictors: covertype — update_covertype","text":"landscape SpatRaster created terra::rast() key tibble, dataframe, character string defining filepath passed readr::read_csv(), used interpret raster values landscape land cover class names; see Details SDM name intended species distribution model: \"waterbird_fall\", \"waterbird_win\" mask Optional filepath raster used mask output, e.g. study area boundary pathout, landscape_name Character strings defining filepath (pathout/SDM/landscape_name) output rasters written overwrite Logical; passed terra::writeRaster(); default FALSE","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_covertype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update waterbird predictors: covertype — update_covertype","text":"Nothing; files written pathout","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_covertype.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update waterbird predictors: covertype — update_covertype","text":"Classifies landscape rasters according land cover classes originally surveyed, classes predictions generated waterbird distribution models. Generates file covertype.tif location pathout/SDM/scenario_name/.","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_covertype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update waterbird predictors: covertype — update_covertype","text":"","code":"# See vignette"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_pwater.html","id":null,"dir":"Reference","previous_headings":"","what":"Update waterbird predictors: pwater & pfld — update_pwater","title":"Update waterbird predictors: pwater & pfld — update_pwater","text":"Helper function updating pwater pfld predictors waterbird distribution models. Generates file pwater.tif locations pathout/pwater/landscape_name pathout/SDM/landscape_name.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_pwater.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update waterbird predictors: pwater & pfld — update_pwater","text":"","code":"update_pwater(   waterdat,   mask = NULL,   pathout,   SDM,   landscape_name,   overwrite = FALSE,   baseline_landscape = NULL,   scenario_landscape = NULL,   floor = FALSE )"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_pwater.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update waterbird predictors: pwater & pfld — update_pwater","text":"waterdat SpatRaster character string giving filepath raster representing probability open water (pwater) cell, specific time frames appropriate scenario_landscape waterbird SDM (.e., fall vs. winter) mask Optional SpatRaster character string giving filepath raster used mask output, e.g. study area boundary pathout, SDM, landscape_name Character strings defining filepath (pathout/SDM/landscape_name) output rasters written; landscape_name either correspond landscape represented waterdat scenario_landscape, given; see Details overwrite Logical; passed terra::writeRaster(); default FALSE baseline_landscape, scenario_landscape Optional SpatRasters created terra::rast() compare estimating pwater changed portions scenario_landscape; see Details floor Logical; TRUE, allow new values pwater lower baseline values","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_pwater.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update waterbird predictors: pwater & pfld — update_pwater","text":"Nothing; files written pathout","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_pwater.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update waterbird predictors: pwater & pfld — update_pwater","text":"waterbird distribution models incorporate information surface water data two ways: pwater, expected probability open surface water cell landscape raster, specific waterbird season modeled perhaps averaged multiple years, pfld focal statistics represent proportion land cover class within given distance cell flooded (see python_focal_prep() python_focal_run()). Therefore, pwater data must available every landscape analysis pfld focal statistics can generated distribution models fit. Due dual needs generating pwater pfld predictors, function writes results two places within pathout. first written pathout/pwater/landscape_name, intended later use python_focal_prep() generating pfld predictors. second written pathout/SDM/landscape_name, expected directory containing final predictors later use fit_SDM() fitting waterbird models. addition, function two modes operation. scenario_landscape provided, waterdat assumed represent pwater data landscape_name, simply renamed copied pathout locations use later steps analysis, optionally masking pathout/SDM/landscape_name written. mask never applied pathout/pwater/landscape_name output intended later focal statistics avoid errors processing near boundaries study area. Alternatively, second mode, baseline_landscape scenario_landscape rasters provided, function estimate new pwater values cells scenario_landscape changed cover class, based mean probability open surface water land cover class baseline_landscape. Optionally, floor = TRUE, new probabilities open water assigned higher baseline values. mode, result represents pwater scenario_landscape, landscape_name reflect name scenario. original pwater baseline data used development models derived Point Blue's Water Tracker may downloaded doi:10.5281/zenodo.7672193.","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_pwater.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update waterbird predictors: pwater & pfld — update_pwater","text":"","code":"# See vignette"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_roosts.html","id":null,"dir":"Reference","previous_headings":"","what":"Update waterbird predictors: crane roost locations — update_roosts","title":"Update waterbird predictors: crane roost locations — update_roosts","text":"Helper function estimating impact landscape changes locations known crane roosts.","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_roosts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update waterbird predictors: crane roost locations — update_roosts","text":"","code":"update_roosts(   landscape,   unsuitable = c(11:19, 60, 70:79, 100:120),   proportion = 0.2,   roosts,   pathout,   landscape_name,   overwrite = FALSE )"},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_roosts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update waterbird predictors: crane roost locations — update_roosts","text":"landscape SpatRaster created terra::rast() unsuitable optional vector numerical values representing land cover classifications considered incompatible crane roosts; default values original land cover encoding include orchard & vineyard classes (11-19), urban (60), riparian classes (70-79), woodland & scrub classes (100-120) proportion numerical value proportion cover unsuitable land cover class roost considered unsuitable; see Details roosts SpatVector created terra::vect() character string giving filepath polygons representing location traditional crane roosts; expects attribute called \"Roost_ID\" pathout, landscape_name Character strings defining filepath (pathout/landscape_name) updated roost location rasters written overwrite Logical; passed terra::writeRaster(); default FALSE","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_roosts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update waterbird predictors: crane roost locations — update_roosts","text":"Nothing; files written pathout/landscape_name","code":""},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_roosts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update waterbird predictors: crane roost locations — update_roosts","text":"landscapes represent projected change baseline conditions, function facilitates evaluating historical crane roosts determine whether land cover overlaying landscape projected become unsuitable, based exceeding threshold proportion covered unsuitable land cover class. Unsuitable roost polygons removed, updated roost maps generated, named scenario_name pathout. Use function prior using python_dist calculate distance roost generate updated versions droost_km.tif scenario. default values unsuitable include original encodings orchard, vineyard, riparian, woodland, scrub, urban land cover classes, default threshold value proportion 0.2. Alternate values can provided desired.","code":""},{"path":[]},{"path":"https://pointblue.github.io/DeltaMultipleBenefits/reference/update_roosts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update waterbird predictors: crane roost locations — update_roosts","text":"","code":"# See vignette"}]
